import streamlit as st
import os
import pandas as pd

st.set_page_config(page_title="Taller Git&GitHub", page_icon=":octopus:", layout="wide")

# Inicio de git, opciones y menus
st.markdown("<h1 style='text-align: center;'>Taller Completo de Git & GitHub</h1>", unsafe_allow_html=True)

# SELECTOR DE TODO EL CONTENIDO
#st.sidebar.title("Contenido")
# contenido = st.sidebar.radio("Seleccione una secci√≥n", ("Home", "Operaciones B√°sicas", "Ramas y Colaboraci√≥n", "Uso Avanzado de Git", "Integraci√≥n con GitHub", "Resumen Taller", "Ejercicios", "Ponte a Prueba", "Feedback"))









# Funci√≥n para verificar las respuestas
def verificar_respuesta(respuesta, correcta):
    if respuesta.strip() == correcta:
        st.success("¬°Correcto!")
    else:
        st.error(f"Incorrecto. La respuesta correcta es `{correcta}`.")

# Funci√≥n para la p√°gina principal
def pagina_principal():
    st.image("./img/git_image.png")
    st.title("Home")
    st.header("Bienvenido al Taller Completo de Git & GitHub")
    st.markdown("""
        En este taller, aprender√°s los conceptos fundamentales y avanzados de Git y GitHub, herramientas esenciales para el desarrollo colaborativo y el control de versiones. 

        ### ¬øQu√© aprender√°s?
        - **Operaciones B√°sicas con Git**: C√≥mo clonar repositorios, a√±adir y eliminar archivos, hacer commits y ver el historial.
        - **Ramas y Colaboraci√≥n**: C√≥mo crear y gestionar ramas, realizar merges y resolver conflictos, y estrategias de colaboraci√≥n en proyectos.
        - **Uso Avanzado de Git**: T√©cnicas avanzadas como rebase, stash, y cherry-pick para mejorar tu flujo de trabajo.
        - **Integraci√≥n con GitHub**: C√≥mo conectar repositorios locales con GitHub, realizar push y pull requests, y colaborar eficazmente en GitHub.
        - **Ejercicios y Quizzes Din√°micos**: Preguntas interactivas, ejercicios pr√°cticos y casos de estudio simulados para aplicar y evaluar tus conocimientos.

        ¬°Esperamos que disfrutes del taller y que te conviertas en un experto en Git y GitHub!
        """)


def comandos_basicos_terminal():
    st.title("Comandos B√°sicos de Terminal")
    st.markdown("""
    En esta secci√≥n, aprender√°s algunos de los comandos m√°s utilizados en la terminal para navegar y gestionar archivos y directorios en tu sistema operativo.

    ### Contenido
    1. üìÅ **Navegaci√≥n y Listado de Archivos**
    2. üìÇ **Gesti√≥n de Directorios**
    3. üóÉÔ∏è **Gesti√≥n de Archivos**
    """)

    st.markdown("### 1. üìÅ Navegaci√≥n y Listado de Archivos")
    st.markdown("""
    Estos comandos te permitir√°n navegar por tu sistema de archivos y listar el contenido de los directorios.

    #### Listar Archivos y Directorios
    Utiliza el siguiente comando para listar los archivos y directorios en el directorio actual:
    ```bash
    ls
    ```

    **Ejemplo:** Lista el contenido de tu proyecto
    ```bash
    $ ls
    app.py  im√°genes  README.md  notebooks
    ```
    Con este ejemplo podemos observar que tenemos 1 script `app.py`, una carpeta `im√°genes`, un archivo `README.md` y otra carpeta denominada `notebooks`.

    #### Mostrar la Ruta del Directorio Actual
    Para mostrar la ruta completa del directorio actual, utiliza:
    ```bash
    pwd
    ```

    **Ejemplo:** Verifica tu ubicaci√≥n actual en el sistema de archivos
    ```bash
    $ pwd
    /home/usuario/proyectos
    ```
    Esto nos muestra que actualmente estamos en el directorio `/home/usuario/proyectos`.

    #### Cambiar de Directorio
    Para cambiar al directorio especificado, utiliza:
    ```bash
    cd <nombre-del-directorio>
    ```

    **Ejemplo:** Cambia al directorio `documentos`
    ```bash
    $ ls
    app.py  documentos  im√°genes
    $ cd documentos
    $ pwd
    /home/usuario/documentos
    ```
    Actualmente nos encontramos en el directorio `/home/usuario` y nos queremos mover a la carpeta `documentos`. Utilizamos el comando `cd` para movernos a dicho lugar y lo chequeamos mediante el comando `pwd` que nos arroja la ruta en la que nos situamos actualmente.

    üìå **Tip:** Usa `cd ..` para subir un nivel en la jerarqu√≠a de directorios.
    """)

    st.markdown("### 2. üìÇ Gesti√≥n de Directorios")
    st.markdown("""
    Estos comandos te permitir√°n crear, eliminar y gestionar directorios en tu sistema.

    #### Crear un Nuevo Directorio
    Utiliza el siguiente comando para crear un nuevo directorio:
    ```bash
    mkdir <nombre-del-directorio>
    ```

    **Ejemplo:** Crea un nuevo directorio llamado `nuevo_directorio`
    ```bash
    $ mkdir nuevo_directorio
    $ ls
    app.py  documentos  im√°genes  nuevo_directorio  README.md
    ```
    En este ejemplo, hemos creado un directorio llamado `nuevo_directorio`. Ahora, al listar el contenido del directorio actual con `ls`, podemos ver que `nuevo_directorio` ha sido a√±adido.

    #### Eliminar un Directorio
    Para eliminar un directorio y su contenido, utiliza:
    ```bash
    rm -r <nombre-del-directorio>
    ```

    **Ejemplo:** Elimina el directorio `viejo_directorio`
    ```bash
    $ rm -r viejo_directorio
    $ ls
    app.py  documentos  im√°genes  README.md
    ```
    Aqu√≠, hemos eliminado el directorio `viejo_directorio`. Al listar el contenido del directorio actual con `ls`, podemos ver que `viejo_directorio` ya no est√° presente.

    üìå **Tip:** Usa `rm -rf` con precauci√≥n, ya que elimina directorios de forma recursiva y forzada.
    """)

    st.markdown("### 3. üóÉÔ∏è Gesti√≥n de Archivos")
    st.markdown("""
    Estos comandos te permitir√°n crear, eliminar, copiar y mover archivos en tu sistema.

    #### Crear un Nuevo Archivo (Linux y MacOs)
    Utiliza el siguiente comando para crear un nuevo archivo vac√≠o:
    ```bash
    touch <nombre-del-archivo>
    ```

    **Ejemplo:** Crea un archivo vac√≠o llamado `archivo_nuevo.txt`
    ```bash
    $ touch archivo_nuevo.txt
    $ ls
    archivo_nuevo.txt  app.py  documentos  im√°genes  README.md
    ```
    En este ejemplo, hemos creado un archivo vac√≠o llamado `archivo_nuevo.txt`. Al listar el contenido del directorio actual con `ls`, podemos ver que `archivo_nuevo.txt` ha sido a√±adido.
                
    ### Crear n Nuevo Archivo (Windows)
    ```bash
    $ New-Item -ItemType file <nombre-del-archivo>
    ```
    **Ejemplo:** Crea un archivo vac√≠o llamado `archivo_nuevo.txt`               
    ```bash
    $ New-Item -ItemType file archivo_nuevo.txt
    $ ls
    archivo_nuevo.txt  app.py  documentos  im√°genes  README.md
    ```
    En este ejemplo, hemos creado un archivo vac√≠o llamado `archivo_nuevo.txt`. Al listar el contenido del directorio actual con `ls`, podemos ver que `archivo_nuevo.txt` ha sido a√±adido.
   
    #### Eliminar un Archivo
    Para eliminar un archivo, utiliza:
    ```bash
    rm <nombre-del-archivo>
    ```

    **Ejemplo:** Elimina el archivo `archivo_viejo.txt`
    ```bash
    $ rm archivo_viejo.txt
    $ ls
    app.py  documentos  im√°genes  README.md
    ```
    Aqu√≠, hemos eliminado el archivo `archivo_viejo.txt`. Al listar el contenido del directorio actual con `ls`, podemos ver que `archivo_viejo.txt` ya no est√° presente.

    #### Copiar un Archivo
    Para copiar un archivo a otra ubicaci√≥n, utiliza:
    ```bash
    cp <archivo_origen> <archivo_destino>
    ```

    **Ejemplo:** Copia el archivo `archivo.txt` a `copia_archivo.txt`
    ```bash
    $ cp archivo.txt copia_archivo.txt
    $ ls
    archivo.txt  app.py  copia_archivo.txt  documentos  im√°genes  README.md
    ```
    En este ejemplo, hemos copiado `archivo.txt` a `copia_archivo.txt`. Al listar el contenido del directorio actual con `ls`, podemos ver que `copia_archivo.txt` ha sido a√±adido.

    #### Mover o Renombrar un Archivo
    Para mover o renombrar un archivo, utiliza:
    ```bash
    mv <archivo_origen> <archivo_destino>
    ```

    **Ejemplo:** Renombra `archivo.txt` a `nuevo_nombre.txt`
    ```bash
    $ mv archivo.txt nuevo_nombre.txt
    $ ls
    app.py  nuevo_nombre.txt  documentos  im√°genes  README.md
    ```
    En este ejemplo, hemos renombrado `archivo.txt` a `nuevo_nombre.txt`. Al listar el contenido del directorio actual con `ls`, podemos ver que `archivo.txt` ha sido renombrado a `nuevo_nombre.txt`.

    üìå **Tip:** Usa `mv` para organizar tus archivos y directorios de manera eficiente.
    """)

    st.markdown("""
    ## Resumen de Comandos
    A continuaci√≥n, se presenta un resumen de los comandos b√°sicos de la terminal en formato de tabla.
    """)

    comandos = [
        {"Comando": "ls", "Descripci√≥n": "Lista los archivos y directorios en el directorio actual."},
        {"Comando": "cd nombre_del_directorio", "Descripci√≥n": "Cambia el directorio actual al especificado."},
        {"Comando": "cd ..", "Descripci√≥n": "Sube un nivel en la jerarqu√≠a de directorios."},
        {"Comando": "pwd", "Descripci√≥n": "Muestra la ruta completa del directorio actual."},
        {"Comando": "mkdir nombre_del_directorio", "Descripci√≥n": "Crea un nuevo directorio."},
        {"Comando": "touch nombre_del_archivo", "Descripci√≥n": "Crea un nuevo archivo vac√≠o. (Linux y MacOs)"},
        {"Comando": "New-Item -ItemType file nombre_del_archivo", "Descripci√≥n": "Crea un nuevo archivo vac√≠o. (Windows)"},
        {"Comando": "rm nombre_del_archivo", "Descripci√≥n": "Elimina archivos o directorios."},
        {"Comando": "cp archivo_origen archivo_destino", "Descripci√≥n": "Copia archivos o directorios."},
        {"Comando": "mv archivo_origen archivo_destino", "Descripci√≥n": "Mueve o renombra archivos o directorios."}
    ]

    # Crear un DataFrame con los comandos
    df_comandos_terminal = pd.DataFrame(comandos)
    st.dataframe(df_comandos_terminal, use_container_width=True)


def configuracion_e_inicializacion_git():
    st.title("Configuraci√≥n e Inicializaci√≥n de Git")
    st.markdown("""
    En esta secci√≥n, aprender√°s c√≥mo configurar Git para tu entorno y c√≥mo inicializar un nuevo repositorio, pero antes trataremos.......
    ### ¬øQu√© es Git?
    Git es un sistema de control de versiones distribuido que te permite rastrear cambios en tus archivos y colaborar con otros desarrolladores. Es una herramienta esencial en el desarrollo de software moderno.

    **Beneficios de Git:**
    - **Distribuci√≥n**: Cada desarrollador tiene una copia completa del historial del proyecto, lo que facilita el trabajo sin conexi√≥n y mejora la seguridad.
    - **Velocidad**: Optimizado para rendimiento, Git maneja grandes proyectos de forma r√°pida y eficiente.
    - **Colaboraci√≥n**: Facilita la colaboraci√≥n entre m√∫ltiples desarrolladores, permitiendo trabajar en paralelo y fusionar cambios de manera efectiva.
    ### Contenido
    1. ‚öôÔ∏è **Configuraci√≥n de Git**
    2. üöÄ **Inicializaci√≥n de Repositorios**
    """)

    st.markdown("### 1. ‚öôÔ∏è Configuraci√≥n de Git")
    st.markdown("""
    Configurar Git adecuadamente es esencial para un uso efectivo. Aqu√≠ te mostramos c√≥mo establecer tus configuraciones iniciales.

    #### Configurar el Nombre de Usuario
    Utiliza el siguiente comando para configurar tu nombre de usuario global:
    ```bash
    git config --global user.name "Tu Nombre"
    ```

    **Ejemplo:** Configura el nombre de usuario
    ```bash
    $ git config --global user.name "Alex Marza"
    ```

    #### Configurar el Correo Electr√≥nico
    Configura tu correo electr√≥nico global con:
    ```bash
    git config --global user.email "tuemail@example.com"
    ```

    **Ejemplo:** Configura el correo electr√≥nico
    ```bash
    $ git config --global user.email "alex.marza@example.com"
    ```

    #### Verificar la Configuraci√≥n Actual
    Para revisar la configuraci√≥n actual de Git, usa:
    ```bash
    git config --list
    ```

    **Ejemplo:** Verifica la configuraci√≥n de Git
    ```bash
    $ git config --list
    user.name=Alex Marza
    user.email=alex.marza@example.com
    ```

    #### Configuraci√≥n Local
    Si deseas establecer configuraciones espec√≠ficas para un repositorio, omite el flag `--global`:
    ```bash
    git config user.name "Nombre Local"
    ```

    **Ejemplo:** Configura el nombre de usuario local
    ```bash
    $ git config user.name "Alex Marza Local"
    ```

    üìå **Tip:** Usa `--global` para configuraciones que se aplicar√°n a todos los repositorios en tu m√°quina.
    """)

    st.markdown("""
    ## Resumen de Comandos
    A continuaci√≥n, se presenta un resumen de los comandos b√°sicos para configuraci√≥n e inicializaci√≥n en Git.
    """)

    comandos = [
        {"Comando": "git config --global user.name 'Tu Nombre'", "Descripci√≥n": "Configura el nombre de usuario global en Git."},
        {"Comando": "git config --global user.email 'tuemail@example.com'", "Descripci√≥n": "Configura el correo electr√≥nico global en Git."},
        {"Comando": "git config --list", "Descripci√≥n": "Muestra la configuraci√≥n actual de Git."},
        {"Comando": "git init", "Descripci√≥n": "Inicializa un nuevo repositorio Git en el directorio actual."}
    ]

    # Crear un DataFrame con los comandos
    df_comandos_git = pd.DataFrame(comandos)
    st.dataframe(df_comandos_git, use_container_width=True)

    st.markdown("### 2. üöÄ Inicializaci√≥n de Repositorios en Git")
    st.markdown("""
    Una vez que Git est√© configurado, puedes comenzar a gestionar tus proyectos con √©l. Aqu√≠ te mostramos c√≥mo inicializar un nuevo repositorio.

    ### Pasos para Inicializar un Repositorio en GitHub

    #### Paso 1: Crea el Repositorio en GitHub
    Ve a [GitHub](https://github.com/) y crea un nuevo repositorio. Copia la URL del repositorio que has creado.

    #### Paso 2: Crea la Carpeta y Ficheros Necesarios para tu Proyecto
    En la terminal de Visual Studio Code editor de c√≥digo fuente preferid0), navega hasta la ubicaci√≥n donde deseas crear tu proyecto y crea una nueva carpeta:
    ```bash
    $ mkdir mi_proyecto
    $ cd mi_proyecto
    ```

    #### Paso 3: Inicializa el Repositorio Git
    Inicializa un repositorio en la carpeta del proyecto:
    ```bash
    $ git init
    Initialized empty Git repository in /home/usuario/mi_proyecto/.git/
    ```

    #### Paso 4: A√±ade los Archivos al √çndice
    A√±ade todos los archivos de tu proyecto al √≠ndice de Git:
    ```bash
    $ git add .
    ```

    #### Paso 5: Realiza un Commit Inicial
    Realiza un commit inicial con un mensaje descriptivo:
    ```bash
    $ git commit -m "versi√≥n 1 del proyecto"
    ```

    #### Paso 6: Renombra la Rama Principal a 'main'
    Renombra la rama principal a 'main' (opcional, pero recomendado):
    ```bash
    $ git branch -M main
    ```

    #### Paso 7: Vincula el Repositorio Local con GitHub
    A√±ade la URL del repositorio remoto que copiaste en el paso 1:
    ```bash
    $ git remote add origin https://github.com/usuario/mi_proyecto.git
    ```

    #### Paso 8: Env√≠a los Cambios al Repositorio Remoto
    Env√≠a los cambios de la rama 'main' al repositorio remoto en GitHub:
    ```bash
    $ git push -u origin main
    ```

    üìå **Tip:** Aseg√∫rate de que tienes permisos de escritura en el repositorio remoto.
    """)

    st.markdown("""
    ## Resumen de Comandos
    A continuaci√≥n, se presenta un resumen de los comandos b√°sicos para inicializaci√≥n en Git.
    """)

    comandos_inicializacion = [
        {"Comando": "mkdir nombre_carpeta", "Descripci√≥n": "Crea una nueva carpeta."},
        {"Comando": "cd nombre_carpeta", "Descripci√≥n": "Cambia al directorio especificado."},
        {"Comando": "git init", "Descripci√≥n": "Inicializa un nuevo repositorio Git en el directorio actual."},
        {"Comando": "git add .", "Descripci√≥n": "A√±ade todos los archivos al √≠ndice de Git."},
        {"Comando": "git commit -m 'mensaje'", "Descripci√≥n": "Realiza un commit con el mensaje especificado."},
        {"Comando": "git branch -M main", "Descripci√≥n": "Renombra la rama principal a 'main'."},
        {"Comando": "git remote add origin URL", "Descripci√≥n": "Vincula el repositorio local con el remoto en GitHub."},
        {"Comando": "git push -u origin main", "Descripci√≥n": "Env√≠a los cambios al repositorio remoto en GitHub."}
    ]

    df_comandos_inicializacion = pd.DataFrame(comandos_inicializacion)
    st.dataframe(df_comandos_inicializacion, use_container_width=True)


import streamlit as st
import pandas as pd

def operaciones_basicas():
    st.title("Operaciones B√°sicas con Git")
    st.markdown("""
    En esta secci√≥n, cubriremos las operaciones b√°sicas que puedes realizar con Git, incluyendo c√≥mo clonar repositorios, a√±adir y eliminar archivos, y c√≥mo hacer commits y ver el historial.

    ### Contenido
    1. üìÇ **Clonar Repositorios**
    2. ‚úèÔ∏è **A√±adir y Eliminar Archivos**
    3. üìú **Hacer Commits y Ver Historial**
    4. üîÑ **Actualizar y Sincronizar Repositorios**
    """)

    # Clonar Repositorios
    st.markdown("""
    ### 1. Clonar Repositorios
    Clonar un repositorio es el primer paso para empezar a colaborar en un proyecto existente o para trabajar en un proyecto desde otra m√°quina. Este proceso copia todo el contenido del repositorio desde el servidor remoto a tu m√°quina local.

    #### ¬øPor Qu√© Clonar un Repositorio?
    - **Colaboraci√≥n**: Permite trabajar en equipo en el mismo proyecto.
    - **Acceso Completo**: Obtienes todo el historial del proyecto, facilitando el seguimiento de cambios.
    - **Desarrollo Local**: Puedes trabajar en tu propio entorno de desarrollo sin afectar el repositorio original hasta que decidas enviar tus cambios.

    #### Pasos para Clonar un Repositorio
    1. **Obtener la URL del Repositorio**: La URL puede ser encontrada en la p√°gina principal del repositorio en plataformas como GitHub, GitLab, o Bitbucket.
    2. **Ejecutar el Comando de Clonado**: Abre tu terminal y utiliza el siguiente comando:
    ```bash
    git clone <URL-del-repositorio>
    ```

    **Ejemplo Real:**
    Para clonar el repositorio `Git` de GitHub, usa el siguiente comando:
    ```bash
    git clone https://github.com/AlexCapis/Git.git
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git clone https://github.com/AlexCapis/Git.git`: Este comando clona el repositorio desde la URL proporcionada a tu directorio actual. El repositorio ser√° copiado en una nueva carpeta llamada `Git` en tu m√°quina local.

    üìå **Tip:** Si el repositorio es privado, necesitar√°s autenticaci√≥n (nombre de usuario y contrase√±a, token de acceso, etc.) para clonar.

    **Resumen del Comando Clonado**
    ```bash
    git clone <URL-del-repositorio>
    ```
    - **`git clone`**: Comando para clonar repositorios.
    - **`<URL-del-repositorio>`**: La URL del repositorio remoto que deseas clonar.

    ¬°Ahora est√°s listo para comenzar a trabajar con Git clonando repositorios de manera efectiva!
    """)

    # A√±adir y Eliminar Archivos
    st.markdown("""
    ### 2. A√±adir y Eliminar Archivos
    Git te permite a√±adir nuevos archivos a tu repositorio y eliminar los que ya no necesitas. Esto te ayuda a gestionar los cambios y mantener tu proyecto limpio y organizado.

    #### ¬øQu√© es el √Årea de Staging?
    El √°rea de staging es una zona intermedia donde se almacenan los cambios que quieres confirmar en el pr√≥ximo commit. Esto te permite preparar y revisar los cambios antes de hacerlos permanentes.

    ![Flujo del √°rea de staging en Git](https://example.com/path/to/staging_area_image.png)
    """)

    st.markdown("""
    #### A√±adir Archivos al Repositorio
    Para a√±adir nuevos archivos al √°rea de staging, utiliza el comando `git add`.
    """)

    st.code("git add <archivo>", language='bash')

    st.markdown("""
    **Ejemplo Real:**
    Para a√±adir un archivo llamado `nuevo-archivo.txt` al √°rea de staging, usa el siguiente comando:
    ```bash
    git add nuevo-archivo.txt
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git add nuevo-archivo.txt`: Este comando agrega el archivo `nuevo-archivo.txt` al √°rea de staging, prepar√°ndolo para el siguiente commit. No se realizan cambios en el repositorio hasta que se haga un commit.
                
    **Explicaci√≥n del Comando:**
    - `git add .`: Este comando agrega todos los archivos en el directorio actual y sus subdirectorios al √°rea de staging. Es una manera r√°pida de a√±adir m√∫ltiples archivos a la vez.

    **Advertencia:**
    - **Uso Cauteloso:** `git add .` a√±ade todos los archivos modificados, nuevos y eliminados en el directorio actual y sus subdirectorios al √°rea de staging. Esto puede incluir archivos que no deseas agregar, como archivos temporales, de configuraci√≥n o de compilaci√≥n. Es recomendable revisar los archivos antes de usar este comando para evitar agregar cambios no deseados.

    üìå **Tip:** Utiliza `git status` para revisar qu√© archivos est√°n a punto de ser a√±adidos al √°rea de staging antes de ejecutar `git add .`.


                



    #### Eliminar Archivos del Repositorio
    Para eliminar un archivo del repositorio y del √°rea de staging, usa el comando `git rm`.
    """)
    

    st.code("git rm <archivo>", language='bash')

    st.markdown("""
    **Ejemplo Real:**
    Para eliminar un archivo llamado `archivo-a-eliminar.txt`, usa el siguiente comando:
    ```bash
    git rm archivo-a-eliminar.txt
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git rm archivo-a-eliminar.txt`: Este comando elimina el archivo `archivo-a-eliminar.txt` tanto del repositorio como del √°rea de staging. El archivo ya no estar√° disponible en el repositorio despu√©s de hacer un commit.

    üìå **Tip:** Si solo deseas eliminar el archivo del √°rea de staging pero mantenerlo en tu directorio de trabajo, usa `git reset HEAD <archivo>` en lugar de `git rm`.

    """)

    # Hacer Commits y Ver Historial
    st.markdown("""
    ### 3. Hacer Commits y Ver Historial
    Realizar commits es una de las funciones m√°s importantes de Git, ya que te permite guardar el estado de tu proyecto en un punto espec√≠fico en el tiempo. Tambi√©n puedes ver el historial de commits para rastrear los cambios realizados y entender c√≥mo ha evolucionado tu proyecto.
    """)

    st.markdown("""
    #### Hacer un Commit
    Para guardar los cambios en el repositorio, usa el comando `git commit` con un mensaje descriptivo.
    """)

    st.code("git commit -m \"Mensaje del commit\"", language='bash')

    st.markdown("""
    **Ejemplo Real:**
    Para guardar tus cambios con un mensaje descriptivo, usa el siguiente comando:
    ```bash
    git commit -m "A√±adido nuevo archivo de configuraci√≥n"
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git commit -m "A√±adido nuevo archivo de configuraci√≥n"`: Este comando crea un nuevo commit con el mensaje `"A√±adido nuevo archivo de configuraci√≥n"`. El commit guardar√° los cambios que est√°n en el √°rea de staging.

    #### Ver el Historial de Commits
    Para ver el historial de commits, utiliza el comando `git log`.
    """)

    st.code("git log", language='bash')

    st.markdown("""
    **Ejemplo Real:**
    Para ver el historial de commits, usa el siguiente comando:
    ```bash
    git log
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git log`: Muestra el historial de commits del repositorio, incluyendo los mensajes de commit, el autor, la fecha y el hash del commit. Esto te permite rastrear la evoluci√≥n de tu proyecto y revisar los cambios realizados.

    üìå **Tip:** Usa `git log --oneline` para ver un historial m√°s compacto y legible.

    """)

    # Actualizar y Sincronizar Repositorios
    st.markdown("""
    ### 4. Actualizar y Sincronizar Repositorios
    Mantener tu repositorio local actualizado con los cambios del repositorio remoto es esencial para colaborar efectivamente y evitar conflictos.

    #### Actualizar el Repositorio Local
    Usa `git pull` para descargar y fusionar los cambios del repositorio remoto con tu repositorio local.
    """)

    st.code("git pull", language='bash')

    st.markdown("""
    **Ejemplo Real:**
    Para actualizar tu repositorio local con los cambios del remoto, usa el siguiente comando:
    ```bash
    git pull
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git pull`: Este comando descarga los cambios del repositorio remoto y los fusiona con tu repositorio local. Es √∫til para mantener tu copia local al d√≠a con los √∫ltimos cambios realizados por otros colaboradores.

    #### Enviar Cambios al Repositorio Remoto
    Usa `git push` para enviar tus cambios locales al repositorio remoto.
    """)

    st.code("git push", language='bash')

    st.markdown("""
    **Ejemplo Real:**
    Para enviar tus cambios al repositorio remoto, usa el siguiente comando:
    ```bash
    git push
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git push`: Este comando env√≠a los commits de tu rama local al repositorio remoto. Es necesario para compartir tus cambios con otros colaboradores o para realizar una copia de seguridad de tu trabajo en el servidor remoto.

    #### Verificar el Estado del Repositorio
    Usa `git status` para ver el estado actual de tu repositorio, incluyendo los archivos modificados y el estado del √°rea de staging.
    """)

    st.code("git status", language='bash')

    st.markdown("""
    **Ejemplo Real:**
    Para verificar el estado de tu repositorio, usa el siguiente comando:
    ```bash
    git status
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git status`: Muestra informaci√≥n sobre el estado actual del repositorio, como los archivos modificados, los archivos en el √°rea de staging y la rama en la que te encuentras. Es √∫til para obtener una visi√≥n general de los cambios que est√°n listos para ser confirmados o los archivos que necesitan atenci√≥n.

    #### Estado Compacto del Repositorio
    Usa `git status -s` para ver el estado del repositorio en un formato compacto.
    """)

    st.code("git status -s", language='bash')

    st.markdown("""
    **Ejemplo Real:**
    Para ver el estado de tu repositorio en un formato compacto, usa el siguiente comando:
    ```bash
    git status -s
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git status -s`: Muestra el estado del repositorio en un formato compacto, lo que facilita una visi√≥n r√°pida de los cambios. Los cambios se representan con c√≥digos de estado abreviados, como `A` para archivos a√±adidos y `M` para archivos modificados.

    #### Crear Alias para Comandos
    Los alias en Git te permiten crear atajos para comandos largos.
    """)

    st.code("git config --global alias.<nombre-alias> '<comando>'", language='bash')

    st.markdown("""
    **Ejemplo Real:**
    Para crear un alias para el comando `git status`, usa el siguiente comando:
    ```bash
    git config --global alias.st status
    ```

    Despu√©s puedes usar el alias as√≠:
    ```bash
    git st
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git config --global alias.st status`: Este comando crea un alias `st` para el comando `git status`. Luego, puedes usar `git st` en lugar de `git status`, lo que ahorra tiempo al escribir comandos largos.""")

    # Resumen de Comandos B√°sicos
    st.markdown("""
    ### Resumen de Comandos B√°sicos

    Aqu√≠ tienes un resumen de los comandos b√°sicos que hemos cubierto:

    """)

    data = {
        "Comando": [
            "git clone <URL>",
            "git add <archivo>",
            "git add ."
            "git rm <archivo>",
            "git commit -m \"mensaje\"",
            "git log",
            "git pull",
            "git push",
            "git status",
            "git status -s",
            "git config --global alias.<nombre-alias> '<comando>'"
        ],
        "Descripci√≥n": [
            "Clona un repositorio",
            "A√±ade un archivo al √°rea de staging",
            "A√±ade todo lo que est√© en el √°rea de staging",
            "Elimina un archivo del repositorio",
            "Guarda los cambios con un mensaje",
            "Muestra el historial de commits",
            "Descarga y fusiona cambios del remoto",
            "Env√≠a cambios locales al remoto",
            "Muestra el estado del repositorio",
            "Muestra el estado en formato compacto",
            "Crea un alias para un comando largo"
        ]
    }

    df = pd.DataFrame(data)
    st.dataframe(df)

    st.markdown("""
    ¬°Con estos comandos b√°sicos, ya puedes comenzar a trabajar con Git y gestionar tu c√≥digo de manera efectiva!
    """)

def ramas_colaboracion():
    st.title("Ramas y Colaboraci√≥n")
    st.markdown("""
    En esta secci√≥n, aprender√°s a crear y gestionar ramas, realizar merges y resolver conflictos, y estrategias de colaboraci√≥n en proyectos.

    ### Contenido
    1. üåø **Crear y Gestionar Ramas**
    2. üîÄ **Realizar Merges y Resolver Conflictos**
    3. ü§ù **Estrategias de Colaboraci√≥n en Proyectos**
    """)

    st.markdown("### 1. üåø Crear y Gestionar Ramas")
    st.markdown("""
    Las ramas en Git te permiten trabajar en diferentes caracter√≠sticas o arreglos de manera aislada. Esto es esencial para una colaboraci√≥n eficiente.

    #### Crear una Nueva Rama
    Utiliza el siguiente comando para crear una nueva rama:
    ```bash
    git branch <nombre-de-la-rama>
    ```

    **Ejemplo Real:**
    ```bash
    git branch feature-nueva
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git branch feature-nueva`: Crea una nueva rama llamada `feature-nueva`. Esto te permite trabajar en nuevas caracter√≠sticas sin afectar la rama principal.

    #### Cambiar a una Rama Diferente
    Para cambiar a una rama existente, utiliza:
    ```bash
    git checkout <nombre-de-la-rama>
    ```

    **Ejemplo Real:**
    ```bash
    git checkout feature-nueva
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git checkout feature-nueva`: Cambia a la rama `feature-nueva`, permiti√©ndote trabajar en los cambios realizados en esa rama.

    #### Crear y Cambiar a una Nueva Rama en un Solo Paso
    Utiliza el siguiente comando para crear una nueva rama y cambiarte a ella en un solo paso:
    ```bash
    git checkout -b <nombre-de-la-rama>
    ```

    **Ejemplo Real:**
    ```bash
    git checkout -b feature-nueva
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git checkout -b feature-nueva`: Crea una nueva rama llamada `feature-nueva` y cambia a ella inmediatamente.

    #### Ver todas las Ramas
    Puedes listar todas las ramas en tu repositorio con:
    ```bash
    git branch
    ```

    **Ejemplo Real:**
    ```bash
    git branch
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git branch`: Muestra una lista de todas las ramas en tu repositorio, con un asterisco (*) indicando la rama activa.

    üìå **Tip:** Usa nombres descriptivos para tus ramas para mantener tu proyecto organizado, por ejemplo, `feature/nueva-funcionalidad` o `bugfix/arreglo-error`.

    üìå **Tip:** Si deseas eliminar una rama que ya no necesitas, usa `git branch -d <nombre-de-la-rama>`. Aseg√∫rate de que la rama haya sido fusionada antes de eliminarla para evitar la p√©rdida de trabajo.

    """)

    st.markdown("### 2. üîÄ Realizar Merges y Resolver Conflictos")
    st.markdown("""
    Una vez que has terminado de trabajar en una rama, puedes integrar esos cambios en otra rama (por ejemplo, la rama principal) utilizando el comando de merge.

    #### Realizar un Merge
    Primero, cambia a la rama donde quieres integrar los cambios:
    ```bash
    git checkout main
    ```

    Luego, realiza el merge:
    ```bash
    git merge <nombre-de-la-rama>
    ```

    **Ejemplo Real:**
    ```bash
    git merge feature-nueva
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git merge feature-nueva`: Integra los cambios de `feature-nueva` en la rama actual (en este caso, `main`). Aseg√∫rate de resolver cualquier conflicto si es necesario.

    #### Resolver Conflictos
    Si Git encuentra cambios conflictivos, te pedir√° que los resuelvas manualmente. Abre los archivos conflictivos, edita y guarda los cambios, y luego a√±ade los archivos resueltos al √°rea de staging:
    ```bash
    git add <archivo-conflictivo>
    ```

    **Ejemplo Real:**
    ```bash
    git add archivo-conflictivo.txt
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git add archivo-conflictivo.txt`: A√±ade el archivo `archivo-conflictivo.txt` al √°rea de staging despu√©s de haber resuelto los conflictos.

    Una vez resueltos todos los conflictos, realiza el commit:
    ```bash
    git commit -m "Resolver conflictos de merge"
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git commit -m "Resolver conflictos de merge"`: Guarda los cambios despu√©s de resolver los conflictos. El mensaje del commit debe describir los conflictos que se resolvieron.

    üìå **Tip:** Usa herramientas de merge como `kdiff3`, `meld`, o editores como VS Code para facilitar la resoluci√≥n de conflictos. Estas herramientas te proporcionan una interfaz visual para comparar y fusionar los cambios.

    """)

    st.markdown("### 3. ü§ù Estrategias de Colaboraci√≥n en Proyectos")
    st.markdown("""
    La colaboraci√≥n en proyectos implica coordinarse eficientemente con tu equipo. Aqu√≠ hay algunas estrategias y buenas pr√°cticas:

    #### Uso de Pull Requests
    - **Pull Requests (PR)** permiten revisar y discutir los cambios antes de integrarlos en la rama principal.
    - Utiliza plataformas como GitHub, GitLab, o Bitbucket para gestionar PRs.

    #### Revisi√≥n de C√≥digo
    - Realiza revisiones de c√≥digo regularmente para mantener la calidad del c√≥digo.
    - Asigna revisores y utiliza comentarios para discutir posibles mejoras.

    #### Integraci√≥n Continua
    - Configura **CI/CD** para realizar pruebas autom√°ticas y asegurar que los cambios no rompan el proyecto.
    - Herramientas como Jenkins, Travis CI, y GitHub Actions son √∫tiles para la integraci√≥n continua.

    üìå **Tip:** Establece convenciones de commits y flujo de trabajo (como GitFlow) para mantener el orden y la coherencia en el proyecto.

    """)

    # T√≠tulo de la secci√≥n
    st.markdown("### Resumen de Comandos para Ramas y Colaboraci√≥n")

    # Crear un DataFrame para la tabla de comandos
    data = {
        "Comando": [
            "`git branch <nombre-de-la-rama>`",
            "`git checkout <nombre-de-la-rama>`",
            "`git checkout -b <nombre-de-la-rama>`",
            "`git branch`",
            "`git merge <nombre-de-la-rama>`",
            "`git add <archivo-conflictivo>`",
            "`git commit -m \"Resolver conflictos de merge\"`",
            "`git branch -d <nombre-de-la-rama>`"
        ],
        "Descripci√≥n": [
            "Crea una nueva rama",
            "Cambia a una rama diferente",
            "Crea una nueva rama y cambia a ella en un solo paso",
            "Ver todas las ramas",
            "Realizar un merge",
            "A√±adir archivos conflictivos resueltos al √°rea de staging",
            "Guardar los cambios despu√©s de resolver conflictos de merge",
            "Eliminar una rama"
        ]
    }

    df = pd.DataFrame(data)

    # Mostrar la tabla usando Streamlit
    st.table(df)

    st.markdown("""
    ### Estrategias de Colaboraci√≥n en Proyectos
    - **Uso de Pull Requests**: Revisar y discutir cambios antes de integrarlos. Utilizar plataformas como GitHub, GitLab, o Bitbucket para gestionar PRs.
    - **Revisi√≥n de C√≥digo**: Realizar revisiones de c√≥digo regularmente. Asignar revisores y utilizar comentarios para discutir mejoras.
    - **Integraci√≥n Continua**: Configurar CI/CD para pruebas autom√°ticas. Herramientas √∫tiles: Jenkins, Travis CI, GitHub Actions.
    
    üìå **Tip:** Establecer convenciones de commits y flujo de trabajo (como GitFlow) para mantener el orden y la coherencia en el proyecto.
    """)

    st.markdown("""
    ¬°Con estas estrategias y comandos, estar√°s listo para colaborar efectivamente y gestionar tus ramas en Git!
    """)


import streamlit as st
import pandas as pd

def avanzado_git():
    st.title("Uso Avanzado de Git")
    
    st.markdown("""
    En esta secci√≥n, exploraremos t√©cnicas avanzadas como rebase, stash, cherry-pick y otros comandos √∫tiles para mejorar tu flujo de trabajo. Estas herramientas te permiten mantener un historial de commits limpio y manejar cambios de forma eficiente.

    ### Contenido
    1. üîÑ **Rebase**
    2. üóÇÔ∏è **Stash**
    3. üçí **Cherry-Pick**
    4. üîÑ **Reset**
    5. üîÑ **Diff y Reflog**
    6. üè∑Ô∏è **Tag**
    """)

    st.markdown("### üîÑ Rebase")
    st.markdown("""
    Rebase te permite reescribir el historial de commits, haciendo que tu historia de commits sea m√°s lineal y f√°cil de seguir.

    #### Comando de Rebase
    ```bash
    git rebase <rama-base>
    ```

    **Ejemplo Real:**
    Supongamos que est√°s trabajando en una rama `feature` y quieres actualizarla con los √∫ltimos cambios de la rama `main`:
    ```bash
    git checkout feature
    git rebase main
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git rebase main`: Reescribe el historial de la rama `feature` para que parezca que se bas√≥ en la punta actual de `main`. Esto hace que la historia sea m√°s limpia y evita un merge commit adicional.

    üìå **Tip:** Utiliza `rebase` en lugar de `merge` para mantener un historial de commits m√°s lineal. Sin embargo, evita rebase en ramas compartidas, ya que puede reescribir el historial y causar problemas a otros colaboradores.

    """)

    st.markdown("### üóÇÔ∏è Stash")
    st.markdown("""
    Stash guarda temporalmente tus cambios sin hacer un commit, lo que te permite cambiar de ramas sin perder tu trabajo.

    #### Comando de Stash
    ```bash
    git stash
    ```

    **Ejemplo Real:**
    Si est√°s trabajando en la rama `feature` y necesitas cambiar a la rama `main` para resolver un problema urgente, pero no has terminado tus cambios, usa:
    ```bash
    git stash
    git checkout main
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git stash`: Guarda tus cambios actuales en un stash temporal y limpia tu √°rea de trabajo. Puedes luego cambiar de rama sin perder los cambios.

    #### Aplicar y Eliminar Stash
    ```bash
    git stash apply
    git stash pop
    ```

    **Ejemplo Real:**
    Despu√©s de resolver el problema en `main`, regresa a `feature` y aplica los cambios guardados:
    ```bash
    git checkout feature
    git stash apply
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git stash apply`: Aplica los cambios guardados en el stash a tu √°rea de trabajo actual.
    - `git stash pop`: Aplica los cambios del stash y luego elimina el stash de la lista.

    üìå **Tip:** Usa `git stash list` para ver todos los stashes guardados. Esto te ayudar√° a gestionar m√∫ltiples stashes si los est√°s utilizando.

    """)

    st.markdown("### üçí Cherry-Pick")
    st.markdown("""
    Cherry-pick te permite aplicar cambios de commits espec√≠ficos a tu rama actual, sin necesidad de hacer un merge completo.

    #### Comando de Cherry-Pick
    ```bash
    git cherry-pick <id-del-commit>
    ```

    **Ejemplo Real:**
    Supongamos que tienes un commit espec√≠fico en la rama `bugfix` que deseas aplicar a la rama `main`:
    ```bash
    git checkout main
    git cherry-pick a1b2c3d4
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git cherry-pick a1b2c3d4`: Aplica el commit con el ID `a1b2c3d4` a la rama `main`. Esto es √∫til para aplicar correcciones o cambios espec√≠ficos sin fusionar todas las ramas.

    üìå **Tip:** Ideal para aplicar hotfixes en ramas de producci√≥n sin mezclar cambios innecesarios de otras ramas.

    """)

    st.markdown("### üîÑ Reset")
    st.markdown("""
    `git reset` te permite deshacer cambios y volver a un estado anterior en tu repositorio.

    #### Comando de Reset
    ```bash
    git reset --hard <commit-id>
    ```

    **Ejemplo Real:**
    Si quieres deshacer todos los cambios recientes y volver a un commit anterior, usa:
    ```bash
    git reset --hard a1b2c3d4
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git reset --hard a1b2c3d4`: Reestablece tu repositorio al commit con el ID `a1b2c3d4`. Todos los cambios no confirmados y commits posteriores se perder√°n.

    #### Reset Suave
    ```bash
    git reset --soft HEAD~1
    ```

    **Ejemplo Real:**
    Si deseas deshacer el √∫ltimo commit pero conservar los cambios en el √°rea de staging:
    ```bash
    git reset --soft HEAD~1
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git reset --soft HEAD~1`: Deshace el √∫ltimo commit pero mantiene los cambios en el √°rea de staging, permiti√©ndote corregir el commit y hacer uno nuevo.

    üìå **Tip:** Usa `git reset --hard` con precauci√≥n, ya que perder√°s todos los cambios no confirmados. `git reset --soft` es √∫til para modificar commits recientes sin perder cambios.

    """)

    st.markdown("### üîÑ Diff y Reflog")
    st.markdown("""
    #### Diff
    `git diff` muestra las diferencias entre archivos en tu repositorio.

    ```bash
    git diff
    ```

    **Ejemplo Real:**
    Para ver las diferencias entre tus cambios actuales y el √∫ltimo commit:
    ```bash
    git diff
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git diff`: Muestra los cambios en los archivos no confirmados en comparaci√≥n con el √∫ltimo commit.

    #### Reflog
    `git reflog` muestra el historial de los cambios en los HEADs de tu repositorio, lo que te permite recuperar commits perdidos.

    ```bash
    git reflog
    ```

    **Ejemplo Real:**
    Para ver el historial de movimientos del HEAD:
    ```bash
    git reflog
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git reflog`: Muestra el historial de todos los cambios en el HEAD, √∫til para recuperar commits o revertir cambios.

    üìå **Tip:** Usa `git diff` para revisar cambios antes de hacer un commit y `git reflog` para recuperar commits que hayas perdido accidentalmente.

    """)

    st.markdown("### üè∑Ô∏è Tag")
    st.markdown("""
    `git tag` te permite crear etiquetas en puntos espec√≠ficos del historial de commits, a menudo usado para marcar versiones de software.

    #### Comando de Tag
    ```bash
    git tag <nombre-del-tag>
    ```

    **Ejemplo Real:**
    Para marcar un commit como versi√≥n `v1.0`:
    ```bash
    git tag v1.0
    ```

    **Explicaci√≥n del Ejemplo:**
    - `git tag v1.0`: Crea una etiqueta `v1.0` en el commit actual. Las etiquetas son √∫tiles para marcar versiones estables en tu proyecto.

    üìå **Tip:** Usa etiquetas para marcar versiones de lanzamiento en tu repositorio y facilitar el seguimiento de versiones.

    """)

    # Resumen de Comandos
    st.markdown("### Resumen de Comandos Avanzados")

    data = {
        "Comando": [
            "`git rebase <rama-base>`",
            "`git stash`",
            "`git stash apply`",
            "`git cherry-pick <id-del-commit>`",
            "`git reset --hard <commit-id>`",
            "`git reset --soft HEAD~1`",
            "`git diff`",
            "`git reflog`",
            "`git tag <nombre-del-tag>`"
        ],
        "Descripci√≥n": [
            "Reescribe el historial de commits",
            "Guarda temporalmente tus cambios",
            "Aplica los cambios guardados con stash",
            "Aplica cambios de un commit espec√≠fico",
            "Deshace cambios y vuelve a un commit anterior",
            "Deshace el √∫ltimo commit pero conserva los cambios",
            "Muestra las diferencias entre archivos",
            "Muestra el historial de movimientos del HEAD",
            "Crea una etiqueta en el historial de commits"
        ]
    }

    df = pd.DataFrame(data)
    st.table(df)






# Funci√≥n para la secci√≥n Uso Avanzado de Git
def integracion_github():
    st.markdown("## Integraci√≥n con GitHub")
    st.markdown("""
    En esta secci√≥n, aprender√°s c√≥mo integrar tu repositorio local con GitHub, manejar pull requests y trabajar con GitHub Actions.

    ### Contenido
    1. üåê **Conectar Repositorio Local a GitHub**
    2. üöÄ **Pull Requests**
    3. ‚öôÔ∏è **GitHub Actions**

    ### Conectar Repositorio Local a GitHub
    Para trabajar con GitHub, primero necesitas conectar tu repositorio local a un repositorio remoto en GitHub.

    #### Crear un Nuevo Repositorio en GitHub
    1. Ve a [GitHub](https://github.com) y accede a tu cuenta.
    2. Haz clic en el bot√≥n "New repository".
    3. Rellena los campos necesarios y haz clic en "Create repository".

    #### Conectar tu Repositorio Local
    ```bash
    git remote add origin <URL-del-repositorio>
    git branch -M main
    git push -u origin main
    ```

    Ejemplo:
    ```bash
    git remote add origin https://github.com/usuario/repositorio.git
    git branch -M main
    git push -u origin main
    ```

    üìå **Tip:** Aseg√∫rate de reemplazar `<URL-del-repositorio>` con la URL de tu repositorio en GitHub.

    ### Pull Requests
    Las pull requests te permiten proponer cambios en el c√≥digo que pueden ser revisados y fusionados por otros colaboradores.

    #### Crear una Pull Request
    1. Haz commits de tus cambios en una nueva rama.
    2. Sube tu rama a GitHub:
    ```bash
    git push origin <nombre-de-la-rama>
    ```
    3. En GitHub, ve a la p√°gina de tu repositorio y haz clic en "Compare & pull request".
    4. Rellena los detalles necesarios y haz clic en "Create pull request".

    ### GitHub Actions
    GitHub Actions te permite automatizar flujos de trabajo como la construcci√≥n, prueba y despliegue de tu c√≥digo.

    #### Crear un Workflow de GitHub Actions
    1. En tu repositorio de GitHub, ve a la pesta√±a "Actions".
    2. Selecciona un flujo de trabajo predefinido o crea uno nuevo.
    3. Sigue las instrucciones para configurar el flujo de trabajo.

    Ejemplo de archivo YAML para un workflow simple:
    ```yaml
    name: CI

    on:
      push:
        branches: [ main ]
      pull_request:
        branches: [ main ]

    jobs:
      build:

        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v2
        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: '3.x'
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
        - name: Run tests
          run: |
            pytest
    ```

    üìå **Tip:** Adapta el archivo YAML a las necesidades espec√≠ficas de tu proyecto.

    """)

    # Resumen de Comandos
    st.markdown("### Resumen de Comandos de Integraci√≥n en GitHub")

    data = {
        "Comando": [
            "`git remote add origin <URL-del-repositorio>`",
            "`git branch -M main`",
            "`git push -u origin main`",
            "`git push origin <nombre-de-la-rama>`"
        ],
        "Descripci√≥n": [
            "Conecta el repositorio local con el remoto en GitHub",
            "Renombra la rama actual a 'main'",
            "Sube la rama 'main' al repositorio remoto y establece el seguimiento",
            "Sube la rama especificada al repositorio remoto"
        ]
    }

    df = pd.DataFrame(data)
    st.table(df)

# Funci√≥n para la secci√≥n Uso Avanzado de Git
# def resumen_taller():
# Funci√≥n para la p√°gina de resumen
def resumen_taller():
    st.title("Resumen del Taller de Git")

    st.header("Comandos de Git Tratados")

    st.markdown("""
    En esta secci√≥n encontrar√°s una tabla con los comandos clave de Git que hemos cubierto en el taller. Cada comando viene con una descripci√≥n, un ejemplo pr√°ctico, y enlaces a la documentaci√≥n oficial para que puedas aprender m√°s en profundidad.

    Esta referencia r√°pida est√° dise√±ada para ayudarte a recordar y aplicar los comandos b√°sicos de Git de manera efectiva.
    """)

    # Crear un DataFrame con los comandos
    comandos = {
        "Comando": ["git clone <URL>", "git add <archivo>", 'git commit -m "mensaje"', "git log", "git stash"],
        "Descripci√≥n": [
            "Clona un repositorio remoto a tu m√°quina local. Ideal para comenzar a trabajar en un proyecto existente.",
            "A√±ade un archivo espec√≠fico al √°rea de staging para prepararlo para el commit. Es un paso previo al commit.",
            "Guarda los cambios realizados en el repositorio con un mensaje que describe lo que se ha cambiado.",
            "Muestra el historial de commits realizados en el repositorio, √∫til para revisar el progreso del proyecto.",
            "Guarda temporalmente los cambios no confirmados sin hacer commit. √ötil si necesitas cambiar de rama o trabajar en otra cosa sin perder el trabajo actual."
        ],
        "Ejemplo Pr√°ctico": [
            "`git clone https://github.com/user/repo.git`\nClona el repositorio del usuario al directorio actual.",
            "`git add archivo.txt`\nPrepara el archivo 'archivo.txt' para el pr√≥ximo commit.",
            "`git commit -m 'A√±adir nuevo archivo'`\nGuarda los cambios realizados con el mensaje 'A√±adir nuevo archivo'.",
            "`git log --oneline`\nMuestra un historial resumido de commits en una sola l√≠nea por commit.",
            "`git stash push -m 'Cambios temporales'`\nGuarda los cambios actuales temporalmente con una descripci√≥n."
        ],
        "Documentaci√≥n": [
            "[git clone](https://git-scm.com/docs/git-clone)",
            "[git add](https://git-scm.com/docs/git-add)",
            "[git commit](https://git-scm.com/docs/git-commit)",
            "[git log](https://git-scm.com/docs/git-log)",
            "[git stash](https://git-scm.com/docs/git-stash)"
        ],
        "Recurso Adicional": [
            "[Tutorial Git Clone](https://www.atlassian.com/git/tutorials/clone)",
            "[Gu√≠a Git Add](https://www.atlassian.com/git/tutorials/saving-changes/git-add)",
            "[Art√≠culos sobre Git Commit](https://www.git-scm.com/docs/git-commit)",
            "[C√≥mo usar Git Log](https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-log)",
            "[Introducci√≥n a Git Stash](https://www.git-scm.com/docs/git-stash)"
        ]
    }

    df_comandos = pd.DataFrame(comandos)
    st.dataframe(df_comandos, use_container_width=True)

    st.header("Tips y Trucos √ötiles")
    st.markdown("""
    A continuaci√≥n, se presentan algunos consejos y trucos que pueden ayudarte a mejorar tu flujo de trabajo con Git:

    - **Utiliza alias en Git:** Configura alias para comandos comunes para ahorrar tiempo. Por ejemplo: `git config --global alias.st status` permite usar `git st` en lugar de `git status`.
    - **Revertir un commit:** Usa `git revert <commit>` para crear un nuevo commit que revierta los cambios del commit especificado, sin eliminar el historial.
    - **Comparar cambios:** Usa `git diff` para ver las diferencias entre tu √°rea de trabajo y el √°rea de staging, o entre commits.
    - **Deshacer cambios en un archivo:** Usa `git restore <archivo>` para descartar cambios en un archivo espec√≠fico que no has a√±adido al √°rea de staging.
    - **Ver cambios en un archivo espec√≠fico:** Usa `git log -p <archivo>` para revisar los cambios realizados en un archivo a lo largo del tiempo.
    - **Colores en el terminal:** Activa colores en el terminal para diferenciar mejor los cambios con `git config --global color.ui auto`.
    - **B√∫squeda en el historial de commits:** Usa `git log --grep="texto"` para buscar commits que contienen un texto espec√≠fico en el mensaje.
    - **Modificar el √∫ltimo commit:** Si necesitas hacer cambios en el √∫ltimo commit, usa `git commit --amend` para editar el mensaje o agregar m√°s cambios.
    """)

    st.markdown("""
    **Recursos Adicionales:**
    - [Git Official Documentation](https://git-scm.com/doc)
    - [Atlassian Git Tutorials](https://www.atlassian.com/git/tutorials)
    """)



# Funci√≥n para la secci√≥n de ejercicios
def ejercicios():
    st.title("Ejercicios de Git")

    # Pregunta 1
    st.header("Pregunta 1: ¬øCu√°l es el comando para clonar un repositorio?")
    respuesta1 = st.text_input("Introduce el comando completo:", key="q1_respuesta")
    if st.button("Verificar Respuesta 1", key="q1_btn"):
        verificar_respuesta(respuesta1, "git clone <URL>")

    # Pregunta 2
    st.header("Pregunta 2: ¬øC√≥mo a√±ades un archivo al √°rea de staging?")
    respuesta2 = st.radio("Selecciona la respuesta correcta:", 
                            ["git add <archivo>", "git commit <archivo>", "git push <archivo>"], key="q2_respuesta")
    if st.button("Verificar Respuesta 2", key="q2_btn"):
        verificar_respuesta(respuesta2, "git add <archivo>")

    # Pregunta 3
    st.header("Pregunta 3: ¬øCu√°l es el comando para guardar cambios en el repositorio con un 'mensaje'?")
    respuesta3 = st.text_input("Introduce el comando completo:", key="q3_respuesta")
    if st.button("Verificar Respuesta 3", key="q3_btn"):
        verificar_respuesta(respuesta3, 'git commit -m "mensaje"')

    # Pregunta 4
    st.header("Pregunta 4: ¬øQu√© comando se usa para ver el historial de commits?")
    respuesta4 = st.radio("Selecciona la respuesta correcta:", 
                            ["git log", "git status", "git history"], key="q4_respuesta")
    if st.button("Verificar Respuesta 4", key="q4_btn"):
        verificar_respuesta(respuesta4, "git log")

    # Pregunta 5
    st.header("Pregunta 5: ¬øC√≥mo guardas temporalmente tus cambios sin hacer commit?")
    respuesta5 = st.text_input("Introduce el comando completo:", key="q5_respuesta")
    if st.button("Verificar Respuesta 5", key="q5_btn"):
        verificar_respuesta(respuesta5, "git stash")

# Funci√≥n para la secci√≥n Uso Avanzado de Git
# def ponte_a_prueba():






# Funci√≥n para la secci√≥n Uso Avanzado de Git

def feedback():
    st.title("Feedback del Taller")
    st.markdown("""
    ¬°Gracias por participar en el taller! Nos gustar√≠a conocer tu opini√≥n para poder mejorar futuras ediciones.
    
    ### Preguntas de Feedback
    """)

    # Pregunta 1
    st.subheader("1. ¬øQu√© te ha parecido el contenido del taller?")
    contenido = st.text_area("Tu respuesta:", key="contenido")

    # Pregunta 2
    st.subheader("2. ¬øHubo alg√∫n tema que te result√≥ especialmente √∫til o interesante?")
    tema_util = st.text_area("Tu respuesta:", key="tema_util")

    # Pregunta 3
    st.subheader("3. ¬øHay alg√∫n aspecto que crees que deber√≠amos mejorar?")
    mejoras = st.text_area("Tu respuesta:", key="mejoras")

    # Pregunta 4
    st.subheader("4. ¬øTe gustar√≠a participar en futuros talleres?")
    futuros_talleres = st.radio("Selecciona una opci√≥n:", ["S√≠", "No"], key="futuros_talleres")

    # Espacio para otros comentarios
    st.subheader("Otros comentarios")
    otros_comentarios = st.text_area("Tu respuesta:", key="otros_comentarios")

    # Bot√≥n para enviar feedback
    if st.button("Enviar Feedback", key="enviar_feedback"):
        st.success("¬°Gracias por tu feedback!")
        # Aqu√≠ puedes a√±adir el c√≥digo para guardar las respuestas (por ejemplo, en una base de datos o archivo)


# Diccionario para la navegaci√≥n
paginas = {
    "Home": pagina_principal,
    "Comandos B√°sicos Terminal": comandos_basicos_terminal,
    "Configuraci√≥n e Inicializaci√≥n": configuracion_e_inicializacion_git,
    "Operaciones B√°sicas": operaciones_basicas,
    "Ramas y Colaboraci√≥n": ramas_colaboracion,
    "Uso Avanzado de Git": avanzado_git,
    "Integraci√≥n con GitHun": integracion_github,
    "Resumen Taller": resumen_taller,
    "Ejercicios": ejercicios,
    "Feedback": feedback
}

# Sidebar para la selecci√≥n de p√°gina
st.sidebar.title("Contenido")
seleccion = st.sidebar.radio("Selecciona una secci√≥n", list(paginas.keys()))

# Ejecutar la funci√≥n correspondiente a la selecci√≥n de p√°gina
paginas[seleccion]()

